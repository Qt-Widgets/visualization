#ifndef INSTRUMENT_H
#define INSTRUMENT_H

#include <QtGlobal>
#include <QWidget>
#include <QColor>
#include <QPixmap>
#include <QMap>
#include <QPainter>

#include "visu_helper.h"
#include "signal.h"


class VisuSignal;   // forward declare Signal class

class VisuInstrument : public QWidget
{
    Q_OBJECT

protected:

    // properties
    quint16 id;                 // instrument id
    quint16 signal_id;          // associated signal id
    QString name;               // instrument name
    quint16 x;                  // x position
    quint16 y;                  // y position
    quint16 width;              // width in pixels
    quint16 height;             // height in pixels
    QColor color_background;    // instrument background color
    QColor color_static;        // color for nonchanging parts (scales, marks, etc)
    QColor color_foreground;    // color for changing parts (pointers, indicators, etc)

    // properties
    QMap<QString, QString> mProperties;

    // pixmaps
    QPixmap mPixmap;        // holds instrument rendered with last received signal value
    QPixmap mPixmapStatic;  // holds prerendered pixmap generated by renderStatic()

    bool    mFirstRun;
    const VisuSignal *mSignal; // Pointer to last signal that was updated


    void paintEvent(QPaintEvent* event);
    virtual void renderStatic(QPainter*) = 0;   // Renders static parts of instrument
    virtual void renderDynamic(QPainter*) = 0;  // Renders signal value dependent parts

    void setFont(QPainter* painter, int font_size);
    void setPen(QPainter* painter, QColor color, int thickness = 1);
    void setBrush(QPainter* painter, QColor color);
    void clear(QPainter* painter);

public slots:
    void signalUpdated(const VisuSignal* const mSignal);

public:
    VisuInstrument();
    explicit VisuInstrument(QWidget *parent, QMap<QString, QString> properties)
        : QWidget(parent)
    {
        this->mProperties = properties;

        ConfigLoadException::setInstrumentLoadContext(properties);

        GET_PROPERTY(id, quint16);
        GET_PROPERTY(signal_id, quint16);
        GET_PROPERTY(name, QString);
        GET_PROPERTY(x, quint16);
        GET_PROPERTY(y, quint16);
        GET_PROPERTY(width, quint16);
        GET_PROPERTY(height, quint16);
        GET_PROPERTY(color_background, QColor);
        GET_PROPERTY(color_static, QColor);
        GET_PROPERTY(color_foreground, QColor);

        this->mFirstRun = true;
        this->mPixmap = QPixmap(width, height);
        this->mPixmapStatic = QPixmap(width, height);

        setGeometry(x, y, width, height);
    }

    // Getters
    quint16 getSignalId();
    quint16 getId();
    void render();
};

#endif // INSTRUMENT_H
